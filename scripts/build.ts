import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import esbuildSvelte from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";

import { readFile, writeFile } from "node:fs/promises";
import type { PluginManifest } from "obsidian";

const ids: Record<string, string> = {
  "obsidian-chatgpt-plugin": "chatgpt",
  "obsidian-render-plugin": "",
};

function getId(name: string) {
  return ids[name] || name;
}

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
  plugins: [
    esbuildSvelte({
      compilerOptions: {
        css: "injected",
      },
      preprocess: sveltePreprocess(),
    }),
  ],
  banner: {
    js: banner,
  },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "dist/main.js",
});

if (prod) {
  await context.rebuild();
  await manifest();
  process.exit(0);
} else {
  await context.watch();
}

async function manifest() {
  const [
    meta,
    readme,
  ] = await Promise.all([
    readFile("package.json"),
    readFile("README.md"),
  ]);
  const pkg: Record<string, string> = JSON.parse(meta.toString());
  const name = readme.toString().split("\n")[0].replace("#", "").trim() ||
    pkg.name;

  const manifest = {
    id: getId(pkg.name),
    name,
    version: pkg.version,
    minAppVersion: "0.15.0",
    description: pkg.description,
    author: "ddosakura",
    authorUrl: "https://github.com/ddosakura",
    // fundingUrl: "",
    // isDesktopOnly: false,
  } satisfies PluginManifest;

  // console.log(manifest);
  await writeFile("dist/manifest.json", JSON.stringify(manifest), {});
}
